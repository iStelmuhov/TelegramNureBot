using System;

namespace LevenshteinAutomaton
{
	/// <summary>
	/// This class stores precompiled transition tables
	/// for universal deterministic Levenshtein automata (with transpositions)
	/// Tables are stored as a static fields
	/// Supported edit distances N are 1 and 2
	/// </summary>
	internal static class ParametricDescription
	{
		//For N=1 states are:
		//		1:{ (i)#0 }
		//		2:{ (i)#1 }
		//		3:{ (i)#1, (i+1)#1 }
		//		4:{ (i)#0, (i+2)#1 }
		//		5:{ (i)#0, (i+1)#1, (i+2)#1 }
		//		6:{ (i)#0, (i+1)#1, (i+1)t#1, (i+2)#1 }
		//For N=2 statex are:
		//		1:{ (i)#0 }
		//		2:{ (i)#1 }
		//		3:{ (i)#2 }
		//		4:{ (i)#1, (i+1)#1 }
		//		5:{ (i)#2, (i+2)#1 }
		//		6:{ (i)#1, (i+2)#2 }
		//		7:{ (i)#1, (i+3)#2 }
		//		8:{ (i)#2, (i+1)#2 }
		//		9:{ (i)#2, (i+2)#2 }
		//		10:{ (i)#2, (i+3)#1 }
		//		11:{ (i)#1, (i+2)#1 }
		//		12:{ (i)#2, (i+3)#2 }
		//		13:{ (i)#2, (i+4)#2 }
		//		14:{ (i)#1, (i+1)#1, (i+3)#2 }
		//		15:{ (i)#2, (i+1)#2, (i+2)#2 }
		//		16:{ (i)#2, (i+2)#1, (i+4)#2 }
		//		17:{ (i)#1, (i+2)#2, (i+3)#2 }
		//		18:{ (i)#2, (i+1)#2, (i+3)#1 }
		//		19:{ (i)#2, (i+2)#1, (i+3)#1 }
		//		20:{ (i)#1, (i+1)#1, (i+2)#1 }
		//		21:{ (i)#2, (i+1)#2, (i+3)#2 }
		//		22:{ (i)#2, (i+1)#2, (i+4)#2 }
		//		23:{ (i)#2, (i+2)#2, (i+3)#2 }
		//		24:{ (i)#2, (i+2)#2, (i+4)#2 }
		//		25:{ (i)#2, (i+3)#2, (i+4)#2 }
		//		26:{ (i)#1, (i)t#1, (i+1)#1, (i+2)#1 }
		//		27:{ (i)#2, (i+1)#2, (i+2)#2, (i+4)#2 }
		//		28:{ (i)#2, (i+1)#2, (i+2)#2, (i+3)#2 }
		//		29:{ (i)#2, (i)t#2, (i+1)#2, (i+2)#2 }
		//		30:{ (i)#2, (i+1)#2, (i+3)#2, (i+4)#2 }
		//		31:{ (i)#1, (i+1)t#2, (i+2)#2, (i+3)#2 }
		//		32:{ (i)#2, (i+2)#2, (i+3)#2, (i+4)#2 }
		//		33:{ (i)#2, (i)t#2, (i+1)#2, (i+3)#1 }
		//		34:{ (i)#2, (i+1)#2, (i+1)t#2, (i+2)#2, (i+3)#2 }
		//		35:{ (i)#2, (i)t#2, (i+1)#2, (i+2)#2, (i+3)#2 }
		//		36:{ (i)#2, (i)t#2, (i+1)#2, (i+2)#2, (i+4)#2 }
		//		37:{ (i)#2, (i+2)#2, (i+2)t#2, (i+3)#2, (i+4)#2 }
		//		38:{ (i)#2, (i+1)#2, (i+2)#2, (i+3)#2, (i+4)#2 }
		//		39:{ (i)#2, (i+1)#2, (i+1)t#2, (i+2)#2, (i+3)#2, (i+4)#2 }
		//		40:{ (i)#2, (i+1)#2, (i+2)#2, (i+2)t#2, (i+3)#2, (i+4)#2 }
		//		41:{ (i)#2, (i)t#2, (i+1)#2, (i+2)#2, (i+3)#2, (i+4)#2 }
		//		42:{ (i)#2, (i)t#2, (i+1)#2, (i+2)#2, (i+2)t#2, (i+3)#2, (i+4)#2 }

		/// <summary>
		/// Precompiled table of accept states [<N>][<State number>, <Distance to end>] -> is accept state
		/// <Distance to end> = <Word length> - <Current offset>
		/// </summary>
		internal static readonly bool[][,] IsAcceptState = new bool[][,] { 
			//N = 1
			new bool[,]{
				{ true, true, false,},
				{ true, false,false,},
				{ false,true, false,},
				{ false,false,true,},
				{ false,false,true,},
				{ false,false,true,},
			},
			//N = 2
			new bool [,]
			{
				{ true,true,true,false,false,},
				{ true,true,false,false,false,},
				{ true,false,false,false,false,},
				{ false,true,true,false,false,},
				{ false,false,true,true,false,},
				{ false,false,true,false,false,},
				{ false,false,false,true,false,},
				{ false,true,false,false,false,},
				{ false,false,true,false,false,},
				{ false,false,false,true,true,},
				{ false,false,true,true,false,},
				{ false,false,false,true,false,},
				{ false,false,false,false,true,},
				{ false,false,false,true,false,},
				{ false,false,true,false,false,},
				{ false,false,false,false,true,},
				{ false,false,false,true,false,},
				{ false,false,false,true,true,},
				{ false,false,false,true,true,},
				{ false,false,true,true,false,},
				{ false,false,false,true,false,},
				{ false,false,false,false,true,},
				{ false,false,false,true,false,},
				{ false,false,false,false,true,},
				{ false,false,false,false,true,},
				{ false,false,true,true,false,},
				{ false,false,false,false,true,},
				{ false,false,false,true,false,},
				{ false,false,true,false,false,},
				{ false,false,false,false,true,},
				{ false,false,false,true,false,},
				{ false,false,false,false,true,},
				{ false,false,false,true,true,},
				{ false,false,false,true,false,},
				{ false,false,false,true,false,},
				{ false,false,false,false,true,},
				{ false,false,false,false,true,},
				{ false,false,false,false,true,},
				{ false,false,false,false,true,},
				{ false,false,false,false,true,},
				{ false,false,false,false,true,},
				{ false,false,false,false,true,},
			}
		};


		/// <summary>
		/// Precompiled state transition table for offset = W (distance to end = 0): [<N>][<Vector value>, <State number>] -> next state number
		/// </summary>
		internal static readonly sbyte[][,] StateTransitions0 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 1,-1,-1,-1,-1,-1,},
				{ 1,-1,-1,-1,-1,-1,},
				{ 1,-1,-1,-1,-1,-1,},
				{ 1,-1,-1,-1,-1,-1,},
				{ 1,-1,-1,-1,-1,-1,},
				{ 1,-1,-1,-1,-1,-1,},
				{ 1,-1,-1,-1,-1,-1,},
				{ 1,-1,-1,-1,-1,-1,},
			},
			//N = 2
			new sbyte[,] { 
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
			},
		};
		/// <summary>
		/// Precompiled offset increment table for offset = W (distance to end = 0): [<N>][<Vector value>, <State number>] -> offset increment
		/// </summary>
		internal static readonly sbyte[][,] OffsetIncrements0 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
			},
			//N = 2
			new sbyte[,] {
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
			},
		};


		/// <summary>
		/// Precompiled state transition table for offset = W - 1 (distance to end = 1): [<N>][<Vector value>, <State number>] -> next state number
		/// </summary>
		internal static readonly sbyte[][,] StateTransitions1 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 2,-1,-1,-1,-1,-1,},
				{ 2,-1,-1,-1,-1,-1,},
				{ 2,-1,-1,-1,-1,-1,},
				{ 2,-1,-1,-1,-1,-1,},
				{ 0, 1, 1,-1,-1,-1,},
				{ 0, 1, 1,-1,-1,-1,},
				{ 0, 1, 1,-1,-1,-1,},
				{ 0, 1, 1,-1,-1,-1,},
			},
			//N = 2
			new sbyte[,] { 
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
			},
		};
		/// <summary>
		/// Precompiled offset increment table for offset = W - 1 (distance to end = 1): [<N>][<Vector value>, <State number>] -> offset increment
		/// </summary>
		internal static readonly sbyte[][,] OffsetIncrements1 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 1, 1, 1,-1,-1,-1,},
				{ 1, 1, 1,-1,-1,-1,},
				{ 1, 1, 1,-1,-1,-1,},
				{ 1, 1, 1,-1,-1,-1,},
			},
			//N = 2
			new sbyte[,] {
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
			},
		};


		/// <summary>
		/// Precompiled state transition table for offset = W - 2 (distance to end = 2): [<N>][<Vector value>, <State number>] -> next state number
		/// </summary>
		internal static readonly sbyte[][,] StateTransitions2 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 2,-1,-1,-1,-1,-1,},
				{ 2,-1,-1,-1,-1,-1,},
				{ 5,-1, 1,-1, 1, 1,},
				{ 5,-1, 1,-1, 1, 1,},
				{ 0, 1, 1, 1, 1, 2,},
				{ 0, 1, 1, 1, 1, 2,},
				{ 0, 1, 2, 1, 2, 2,},
				{ 0, 1, 2, 1, 2, 2,},
			},
			//N = 2
			new sbyte[,] { 
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,2,7,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,2,28,-1,2,-1,-1,28,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,7,1,-1,2,2,-1,1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,7,1,-1,7,2,-1,1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
			},
		};
		/// <summary>
		/// Precompiled offset increment table for offset = W - 2 (distance to end = 2): [<N>][<Vector value>, <State number>] -> offset increment
		/// </summary>
		internal static readonly sbyte[][,] OffsetIncrements2 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1, 2,-1, 2, 2,},
				{ 0,-1, 2,-1, 2, 2,},
				{ 1, 1, 1, 1, 1, 1,},
				{ 1, 1, 1, 1, 1, 1,},
				{ 1, 1, 1, 1, 1, 1,},
				{ 1, 1, 1, 1, 1, 1,},
			},
			//N = 2
			new sbyte[,] {
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,-1,2,-1,-1,0,-1,-1,-1,2,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
			},
		};

		/// <summary>
		/// Precompiled state transition table for offset = W - 3 (distance to end = 3): [<N>][<Vector value>, <State number>] -> next state number
		/// </summary>
		internal static readonly sbyte[][,] StateTransitions3 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 2,-1,-1,-1,-1,-1,},
				{ 2,-1,-1, 1, 1, 1,},
				{ 5,-1, 1,-1, 1, 1,},
				{ 5,-1, 1, 1, 2, 2,},
				{ 0, 1, 1, 1, 1, 2,},
				{ 0, 1, 1, 3, 3, 4,},
				{ 0, 1, 2, 1, 2, 2,},
				{ 0, 1, 2, 3, 4, 4,},
			},
			//N = 2
			new sbyte[,] { 
				{ 3,7,-1,14,7,7,7,-1,-1,2,27,-1,-1,14,-1,-1,7,2,7,27,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,7,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,7,7,7,-1,-1,2,27,-1,-1,14,-1,-1,7,2,7,27,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,7,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,7,7,7,-1,-1,2,27,-1,-1,14,-1,-1,7,2,7,27,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,7,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,7,7,7,-1,-1,2,27,-1,-1,14,-1,-1,7,2,7,27,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,7,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 13,7,-1,33,1,20,7,-1,2,2,17,-1,-1,33,2,-1,20,2,1,17,-1,-1,2,-1,-1,17,-1,2,2,-1,20,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 13,7,-1,33,1,20,7,-1,2,2,17,-1,-1,33,2,-1,20,2,1,17,-1,-1,2,-1,-1,17,-1,2,2,-1,20,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 13,7,-1,33,1,20,7,-1,2,2,17,-1,-1,33,2,-1,20,2,1,17,-1,-1,2,-1,-1,17,-1,2,2,-1,20,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 13,7,-1,33,1,20,7,-1,2,2,17,-1,-1,33,2,-1,20,2,1,17,-1,-1,2,-1,-1,17,-1,2,2,-1,20,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,7,28,28,2,-1,2,34,-1,-1,4,2,-1,28,7,7,4,2,-1,-1,-1,-1,4,-1,2,2,-1,34,-1,7,7,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,7,28,28,2,-1,2,34,-1,-1,4,2,-1,28,7,7,4,2,-1,-1,-1,-1,4,-1,2,2,-1,34,-1,7,7,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,7,28,28,2,-1,2,34,-1,-1,4,2,-1,28,7,7,4,2,-1,-1,-1,-1,4,-1,2,2,-1,34,-1,7,7,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,7,28,28,2,-1,2,34,-1,-1,4,2,-1,28,7,7,4,2,-1,-1,-1,-1,4,-1,2,2,-1,34,-1,7,7,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,1,34,28,2,2,2,32,-1,-1,4,7,-1,34,7,1,18,2,-1,2,-1,-1,18,-1,7,7,-1,34,-1,7,7,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,1,34,28,2,2,2,32,-1,-1,4,7,-1,34,7,1,18,2,-1,2,-1,-1,18,-1,7,7,-1,34,-1,7,7,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,1,34,28,2,2,2,32,-1,-1,4,7,-1,34,7,1,18,2,-1,2,-1,-1,18,-1,7,7,-1,34,-1,7,7,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 25,28,-1,4,1,34,28,2,2,2,32,-1,-1,4,7,-1,34,7,1,18,2,-1,2,-1,-1,18,-1,7,7,-1,34,-1,7,7,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,14,1,1,2,2,8,5,2,-1,1,2,-1,1,8,14,5,2,-1,2,-1,-1,3,-1,2,7,-1,1,-1,14,2,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,14,1,1,2,2,8,5,2,-1,1,2,-1,1,8,14,5,2,-1,2,-1,-1,3,-1,2,7,-1,1,-1,14,2,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,14,1,1,2,2,8,5,2,-1,1,2,-1,1,8,14,5,2,-1,2,-1,-1,3,-1,2,7,-1,1,-1,14,2,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,1,14,1,1,2,2,8,5,2,-1,1,2,-1,1,8,14,5,2,-1,2,-1,-1,3,-1,2,7,-1,1,-1,14,2,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,5,4,5,1,2,8,8,10,2,-1,5,8,-1,5,8,4,10,2,-1,8,-1,-1,19,-1,8,14,-1,5,-1,14,8,14,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,5,4,5,1,2,8,8,10,2,-1,5,8,-1,5,8,4,10,2,-1,8,-1,-1,19,-1,8,14,-1,5,-1,14,8,14,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,5,4,5,1,2,8,8,10,2,-1,5,8,-1,5,8,4,10,2,-1,8,-1,-1,19,-1,8,14,-1,5,-1,14,8,14,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,5,4,5,1,2,8,8,10,2,-1,5,8,-1,5,8,4,10,2,-1,8,-1,-1,19,-1,8,14,-1,5,-1,14,8,14,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,14,1,1,7,2,8,5,2,-1,3,7,-1,1,14,14,3,7,-1,2,-1,-1,3,-1,7,7,-1,5,-1,14,14,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,14,1,1,7,2,8,5,2,-1,3,7,-1,1,14,14,3,7,-1,2,-1,-1,3,-1,7,7,-1,5,-1,14,14,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,14,1,1,7,2,8,5,2,-1,3,7,-1,1,14,14,3,7,-1,2,-1,-1,3,-1,7,7,-1,5,-1,14,14,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,14,1,1,7,2,8,5,2,-1,3,7,-1,1,14,14,3,7,-1,2,-1,-1,3,-1,7,7,-1,5,-1,14,14,7,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,4,5,1,7,8,8,10,2,-1,3,14,-1,5,14,4,19,7,-1,8,-1,-1,19,-1,14,14,-1,5,-1,14,14,14,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,4,5,1,7,8,8,10,2,-1,3,14,-1,5,14,4,19,7,-1,8,-1,-1,19,-1,14,14,-1,5,-1,14,14,14,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,4,5,1,7,8,8,10,2,-1,3,14,-1,5,14,4,19,7,-1,8,-1,-1,19,-1,14,14,-1,5,-1,14,14,14,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,1,2,3,4,5,1,7,8,8,10,2,-1,3,14,-1,5,14,4,19,7,-1,8,-1,-1,19,-1,14,14,-1,5,-1,14,14,14,-1,-1,-1,-1,-1,-1,-1,},
			},
		};
		/// <summary>
		/// Precompiled offset increment table for offset = W - 3 (distance to end = 3): [<N>][<Vector value>, <State number>] -> offset increment
		/// </summary>
		internal static readonly sbyte[][,] OffsetIncrements3 = new sbyte[][,] {
			//N = 1
			new sbyte[,] {
				{ 0,-1,-1,-1,-1,-1,},
				{ 0,-1,-1, 3, 3, 3,},
				{ 0,-1, 2,-1, 2, 2,},
				{ 0,-1, 2, 3, 2, 2,},
				{ 1, 1, 1, 1, 1, 1,},
				{ 1, 1, 1, 1, 1, 1,},
				{ 1, 1, 1, 1, 1, 1,},
				{ 1, 1, 1, 1, 1, 1,},
			},
			//N = 2
			new sbyte[,] {
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,-1,0,-1,-1,0,3,2,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,-1,0,-1,-1,0,3,2,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,-1,0,-1,-1,0,3,2,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,-1,0,-1,-1,0,3,2,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,-1,0,3,-1,0,3,3,0,-1,-1,3,-1,-1,0,-1,3,3,-1,0,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,-1,0,3,-1,0,3,3,0,-1,-1,3,-1,-1,0,-1,3,3,-1,0,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,-1,0,3,-1,0,3,3,0,-1,-1,3,-1,-1,0,-1,3,3,-1,0,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,-1,0,3,-1,0,3,3,0,-1,-1,3,-1,-1,0,-1,3,3,-1,0,-1,3,3,3,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,-1,0,2,-1,0,2,2,0,2,-1,-1,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,-1,0,2,-1,0,2,2,0,2,-1,-1,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,-1,0,2,-1,0,2,2,0,2,-1,-1,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,-1,0,2,-1,0,2,2,0,2,-1,-1,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,-1,0,2,-1,0,2,3,0,2,-1,3,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,-1,0,2,-1,0,2,3,0,2,-1,3,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,-1,0,2,-1,0,2,3,0,2,-1,3,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,-1,0,2,-1,0,2,3,0,2,-1,3,-1,-1,0,-1,2,2,-1,0,-1,2,2,2,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,},
			},
		};

		/// <summary>
		/// Precompiled state transition table for offset = W - 4 (distance to end = 4): [<N>][<Vector value>, <State number>] -> next state number
		/// </summary>
		internal static readonly sbyte[][,] StateTransitions4 = new sbyte[][,] {
			//N = 1
			StateTransitions3[0],
			//N = 2
			new sbyte[,] { 
				{ 3,7,-1,14,7,7,7,-1,-1,7,27,-1,-1,14,-1,7,7,7,14,27,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,7,7,7,-1,-1,7,27,-1,-1,14,-1,7,7,7,14,27,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,28,7,21,-1,-1,1,39,2,-1,26,-1,28,21,1,4,39,2,-1,2,-1,2,39,-1,2,-1,2,21,2,1,2,2,-1,2,2,2,2,2,2,},
				{ 3,7,-1,14,28,7,21,-1,-1,1,39,2,-1,26,-1,28,21,1,4,39,2,-1,2,-1,2,39,-1,2,-1,2,21,2,1,2,2,-1,2,2,2,2,2,2,},
				{ 13,7,-1,33,1,20,7,-1,2,7,17,-1,-1,33,2,1,20,7,1,17,-1,-1,2,2,-1,17,2,2,2,-1,20,2,7,2,2,2,7,2,2,7,2,7,},
				{ 13,7,-1,33,1,20,7,-1,2,7,17,-1,-1,33,2,1,20,7,1,17,-1,-1,2,2,-1,17,2,2,2,-1,20,2,7,2,2,2,7,2,2,7,2,7,},
				{ 13,7,-1,33,1,20,21,-1,2,1,17,2,-1,38,2,1,29,1,3,17,2,-1,7,2,2,17,2,7,2,2,29,7,1,7,7,2,7,7,7,7,7,7,},
				{ 13,7,-1,33,1,20,21,-1,2,1,17,2,-1,38,2,1,29,1,3,17,2,-1,7,2,2,17,2,7,2,2,29,7,1,7,7,2,7,7,7,7,7,7,},
				{ 25,28,-1,4,7,28,28,2,-1,7,34,-1,-1,4,2,7,28,14,14,4,2,2,-1,-1,-1,4,2,2,2,2,34,-1,14,7,2,2,-1,2,7,2,2,2,},
				{ 25,28,-1,4,7,28,28,2,-1,7,34,-1,-1,4,2,7,28,14,14,4,2,2,-1,-1,-1,4,2,2,2,2,34,-1,14,7,2,2,-1,2,7,2,2,2,},
				{ 25,28,-1,4,28,28,35,2,-1,1,41,2,-1,15,2,28,35,4,4,15,8,2,2,-1,2,15,2,8,2,8,40,2,4,14,8,2,2,8,14,8,8,8,},
				{ 25,28,-1,4,28,28,35,2,-1,1,41,2,-1,15,2,28,35,4,4,15,8,2,2,-1,2,15,2,8,2,8,40,2,4,14,8,2,2,8,14,8,8,8,},
				{ 25,28,-1,4,1,34,28,2,2,7,32,-1,-1,4,7,1,34,14,1,18,2,2,2,2,-1,18,7,7,7,2,34,2,14,7,7,7,7,7,7,14,7,14,},
				{ 25,28,-1,4,1,34,28,2,2,7,32,-1,-1,4,7,1,34,14,1,18,2,2,2,2,-1,18,7,7,7,2,34,2,14,7,7,7,7,7,7,14,7,14,},
				{ 25,28,-1,4,1,34,35,2,2,1,32,2,-1,15,7,1,40,4,3,18,8,2,7,2,2,18,7,14,7,8,40,7,4,14,14,7,7,14,14,14,14,14,},
				{ 25,28,-1,4,1,34,35,2,2,1,32,2,-1,15,7,1,40,4,3,18,8,2,7,2,2,18,7,14,7,8,40,7,4,14,14,7,7,14,14,14,14,14,},
				{ 0,1,2,1,14,1,1,2,2,22,5,2,2,1,2,14,1,22,27,5,2,2,2,2,2,3,2,2,7,2,1,2,27,2,7,7,2,2,2,2,7,7,},
				{ 0,1,2,1,14,1,1,2,2,22,5,2,2,1,2,14,1,22,27,5,2,2,2,2,2,3,2,2,7,2,1,2,27,2,7,7,2,2,2,2,7,7,},
				{ 0,1,2,1,33,1,6,2,2,9,30,11,2,6,2,33,6,9,17,30,11,2,11,2,11,13,2,11,7,11,6,11,17,11,20,7,11,11,11,11,20,20,},
				{ 0,1,2,1,33,1,6,2,2,9,30,11,2,6,2,33,6,9,17,30,11,2,11,2,11,13,2,11,7,11,6,11,17,11,20,7,11,11,11,11,20,20,},
				{ 0,1,2,5,4,5,1,2,8,22,10,2,2,5,8,4,5,22,4,10,2,2,8,8,2,19,8,8,14,2,5,8,27,8,14,14,22,8,8,22,14,27,},
				{ 0,1,2,5,4,5,1,2,8,22,10,2,2,5,8,4,5,22,4,10,2,2,8,8,2,19,8,8,14,2,5,8,27,8,14,14,22,8,8,22,14,27,},
				{ 0,1,2,5,4,5,6,2,8,9,10,11,2,16,8,4,16,9,18,10,11,2,22,8,11,19,8,22,14,11,16,22,17,22,27,14,22,22,22,22,27,27,},
				{ 0,1,2,5,4,5,6,2,8,9,10,11,2,16,8,4,16,9,18,10,11,2,22,8,11,19,8,22,14,11,16,22,17,22,27,14,22,22,22,22,27,27,},
				{ 0,1,2,3,14,1,1,7,2,22,5,2,2,3,7,14,1,27,27,3,7,7,2,2,2,3,7,7,7,7,5,2,27,14,7,7,2,7,14,7,7,7,},
				{ 0,1,2,3,14,1,1,7,2,22,5,2,2,3,7,14,1,27,27,3,7,7,2,2,2,3,7,7,7,7,5,2,27,14,7,7,2,7,14,7,7,7,},
				{ 0,1,2,3,33,1,6,7,2,9,30,11,2,13,7,33,6,17,17,13,20,7,11,2,11,13,7,20,7,20,16,11,17,27,20,7,11,20,27,20,20,20,},
				{ 0,1,2,3,33,1,6,7,2,9,30,11,2,13,7,33,6,17,17,13,20,7,11,2,11,13,7,20,7,20,16,11,17,27,20,7,11,20,27,20,20,20,},
				{ 0,1,2,3,4,5,1,7,8,22,10,2,2,3,14,4,5,27,4,19,7,7,8,8,2,19,14,14,14,7,5,8,27,14,14,14,22,14,14,27,14,27,},
				{ 0,1,2,3,4,5,1,7,8,22,10,2,2,3,14,4,5,27,4,19,7,7,8,8,2,19,14,14,14,7,5,8,27,14,14,14,22,14,14,27,14,27,},
				{ 0,1,2,3,4,5,6,7,8,9,10,11,2,13,14,4,16,17,18,19,20,7,22,8,11,19,14,27,14,20,16,22,17,27,27,14,22,27,27,27,27,27,},
				{ 0,1,2,3,4,5,6,7,8,9,10,11,2,13,14,4,16,17,18,19,20,7,22,8,11,19,14,27,14,20,16,22,17,27,27,14,22,27,27,27,27,27,},
			},
		};
		/// <summary>
		/// Precompiled offset increment table for offset = W - 4 (distance to end = 4): [<N>][<Vector value>, <State number>] -> offset increment
		/// </summary>
		internal static readonly sbyte[][,] OffsetIncrements4 = new sbyte[][,] {
			//N = 1
			OffsetIncrements3[0],
			//N = 2
			new sbyte[,] {
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,-1,0,-1,2,0,3,2,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,-1,0,-1,2,0,3,2,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,-1,-1,4,0,4,-1,0,-1,2,0,4,2,0,4,-1,4,-1,4,0,-1,4,-1,4,0,4,4,4,4,-1,4,4,4,4,4,4,},
				{ 0,0,-1,0,2,0,0,-1,-1,4,0,4,-1,0,-1,2,0,4,2,0,4,-1,4,-1,4,0,-1,4,-1,4,0,4,4,4,4,-1,4,4,4,4,4,4,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,-1,0,3,3,0,3,3,0,-1,-1,3,3,-1,0,3,3,3,-1,0,3,3,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,-1,0,3,3,0,3,3,0,-1,-1,3,3,-1,0,3,3,3,-1,0,3,3,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,3,0,0,-1,3,4,0,4,-1,0,3,3,0,4,3,0,4,-1,3,3,4,0,3,3,3,4,0,3,4,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,3,0,0,-1,3,4,0,4,-1,0,3,3,0,4,3,0,4,-1,3,3,4,0,3,3,3,4,0,3,4,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,-1,0,2,2,0,2,2,0,2,2,-1,-1,-1,0,2,2,2,2,0,-1,2,2,2,2,-1,2,2,2,2,2,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,-1,0,2,2,0,2,2,0,2,2,-1,-1,-1,0,2,2,2,2,0,-1,2,2,2,2,-1,2,2,2,2,2,},
				{ 0,0,-1,0,2,0,0,2,-1,4,0,4,-1,0,2,2,0,2,2,0,2,2,4,-1,4,0,2,2,2,2,0,4,2,2,2,2,4,2,2,2,2,2,},
				{ 0,0,-1,0,2,0,0,2,-1,4,0,4,-1,0,2,2,0,2,2,0,2,2,4,-1,4,0,2,2,2,2,0,4,2,2,2,2,4,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,-1,0,2,3,0,2,3,0,2,2,3,3,-1,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,-1,0,2,3,0,2,3,0,2,2,3,3,-1,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,4,0,4,-1,0,2,3,0,2,3,0,2,2,3,3,4,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,4,0,4,-1,0,2,3,0,2,3,0,2,2,3,3,4,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			},
		};

		/// <summary>
		/// Precompiled state transition table for offset = W - 5 (distance to end = 5): [<N>][<Vector value>, <State number>] -> next state number
		/// </summary>
		internal static readonly sbyte[][,] StateTransitions5 = new sbyte[][,] {
			//N = 1
			StateTransitions3[0],
			//N = 2
			new sbyte[,] { 
				{ 3,7,-1,14,7,7,7,-1,-1,7,27,-1,-1,14,-1,7,7,7,14,27,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,7,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 3,7,-1,14,7,7,7,-1,-1,28,27,-1,2,14,-1,20,7,28,33,27,-1,2,-1,2,2,27,2,-1,-1,2,7,2,28,-1,-1,2,2,2,2,2,2,2,},
				{ 3,7,-1,14,28,7,21,-1,-1,1,39,2,-1,26,-1,28,21,1,4,39,2,-1,2,-1,2,39,-1,2,-1,2,21,2,1,2,2,-1,2,2,2,2,2,2,},
				{ 3,7,-1,14,28,7,21,-1,-1,1,39,2,2,26,-1,34,21,1,4,39,2,2,2,2,7,39,2,2,-1,7,21,7,1,2,2,2,7,7,7,7,7,7,},
				{ 13,7,-1,33,1,20,7,-1,2,7,17,-1,-1,33,2,1,20,7,1,17,-1,-1,2,2,-1,17,2,2,2,-1,20,2,7,2,2,2,7,2,2,7,2,7,},
				{ 13,7,-1,33,1,20,7,-1,2,28,17,-1,2,33,2,5,20,28,5,17,-1,2,2,8,2,17,8,2,2,2,20,8,28,2,2,8,14,8,8,14,8,14,},
				{ 13,7,-1,33,1,20,21,-1,2,1,17,2,-1,38,2,1,29,1,3,17,2,-1,7,2,2,17,2,7,2,2,29,7,1,7,7,2,7,7,7,7,7,7,},
				{ 13,7,-1,33,1,20,21,-1,2,1,17,2,2,38,2,5,29,1,3,17,2,2,7,8,7,17,8,7,2,7,29,14,1,7,7,8,14,14,14,14,14,14,},
				{ 25,28,-1,4,7,28,28,2,-1,7,34,-1,-1,4,2,7,28,14,14,4,2,2,-1,-1,-1,4,2,2,2,2,34,-1,14,7,2,2,-1,2,7,2,2,2,},
				{ 25,28,-1,4,7,28,28,2,-1,28,34,-1,2,4,2,20,28,33,33,4,2,11,-1,2,2,4,11,2,2,11,34,2,33,7,2,11,2,11,20,11,11,11,},
				{ 25,28,-1,4,28,28,35,2,-1,1,41,2,-1,15,2,28,35,4,4,15,8,2,2,-1,2,15,2,8,2,8,40,2,4,14,8,2,2,8,14,8,8,8,},
				{ 25,28,-1,4,28,28,35,2,-1,1,41,2,2,15,2,34,35,4,4,15,8,11,2,2,7,15,11,8,2,22,40,7,4,14,8,11,7,22,27,22,22,22,},
				{ 25,28,-1,4,1,34,28,2,2,7,32,-1,-1,4,7,1,34,14,1,18,2,2,2,2,-1,18,7,7,7,2,34,2,14,7,7,7,7,7,7,14,7,14,},
				{ 25,28,-1,4,1,34,28,2,2,28,32,-1,2,4,7,5,34,33,5,18,2,11,2,8,2,18,20,7,7,11,34,8,33,7,7,20,14,20,20,27,20,27,},
				{ 25,28,-1,4,1,34,35,2,2,1,32,2,-1,15,7,1,40,4,3,18,8,2,7,2,2,18,7,14,7,8,40,7,4,14,14,7,7,14,14,14,14,14,},
				{ 25,28,-1,4,1,34,35,2,2,1,32,2,2,15,7,5,40,4,3,18,8,11,7,8,7,18,20,14,7,22,40,14,4,14,14,20,14,27,27,27,27,27,},
				{ 0,1,2,1,14,1,1,2,2,22,5,2,2,1,2,14,1,22,27,5,2,2,2,2,2,3,2,2,7,2,1,2,27,2,7,7,2,2,2,2,7,7,},
				{ 0,1,2,1,14,1,1,2,2,36,5,2,12,1,2,26,1,36,39,5,2,12,2,12,12,3,12,2,7,12,1,12,39,2,7,21,12,12,12,12,21,21,},
				{ 0,1,2,1,33,1,6,2,2,9,30,11,2,6,2,33,6,9,17,30,11,2,11,2,11,13,2,11,7,11,6,11,17,11,20,7,11,11,11,11,20,20,},
				{ 0,1,2,1,33,1,6,2,2,9,30,11,12,6,2,38,6,9,17,30,11,12,11,12,24,13,12,11,7,24,6,24,17,11,20,21,24,24,24,24,29,29,},
				{ 0,1,2,5,4,5,1,2,8,22,10,2,2,5,8,4,5,22,4,10,2,2,8,8,2,19,8,8,14,2,5,8,27,8,14,14,22,8,8,22,14,27,},
				{ 0,1,2,5,4,5,1,2,8,36,10,2,12,5,8,15,5,36,15,10,2,12,8,23,12,19,23,8,14,12,5,23,39,8,14,26,31,23,23,31,26,37,},
				{ 0,1,2,5,4,5,6,2,8,9,10,11,2,16,8,4,16,9,18,10,11,2,22,8,11,19,8,22,14,11,16,22,17,22,27,14,22,22,22,22,27,27,},
				{ 0,1,2,5,4,5,6,2,8,9,10,11,12,16,8,15,16,9,18,10,11,12,22,23,24,19,23,22,14,24,16,31,17,22,27,26,31,31,31,31,37,37,},
				{ 0,1,2,3,14,1,1,7,2,22,5,2,2,3,7,14,1,27,27,3,7,7,2,2,2,3,7,7,7,7,5,2,27,14,7,7,2,7,14,7,7,7,},
				{ 0,1,2,3,14,1,1,7,2,36,5,2,12,3,7,26,1,39,39,3,7,21,2,12,12,3,21,7,7,21,5,12,39,14,7,21,12,21,26,21,21,21,},
				{ 0,1,2,3,33,1,6,7,2,9,30,11,2,13,7,33,6,17,17,13,20,7,11,2,11,13,7,20,7,20,16,11,17,27,20,7,11,20,27,20,20,20,},
				{ 0,1,2,3,33,1,6,7,2,9,30,11,12,13,7,38,6,17,17,13,20,21,11,12,24,13,21,20,7,29,16,24,17,27,20,21,24,29,37,29,29,29,},
				{ 0,1,2,3,4,5,1,7,8,22,10,2,2,3,14,4,5,27,4,19,7,7,8,8,2,19,14,14,14,7,5,8,27,14,14,14,22,14,14,27,14,27,},
				{ 0,1,2,3,4,5,1,7,8,36,10,2,12,3,14,15,5,39,15,19,7,21,8,23,12,19,26,14,14,21,5,23,39,14,14,26,31,26,26,37,26,37,},
				{ 0,1,2,3,4,5,6,7,8,9,10,11,2,13,14,4,16,17,18,19,20,7,22,8,11,19,14,27,14,20,16,22,17,27,27,14,22,27,27,27,27,27,},
				{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,19,26,27,14,29,16,31,17,27,27,26,31,37,37,37,37,37,},
			},
		};
		/// <summary>
		/// Precompiled offset increment table for offset = W - 5 (distance to end = 5): [<N>][<Vector value>, <State number>] -> offset increment
		/// </summary>
		internal static readonly sbyte[][,] OffsetIncrements5 = new sbyte[][,] {
			//N = 1
			OffsetIncrements3[0],
			//N = 2
			new sbyte[,] {
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,-1,0,-1,2,0,3,2,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,},
				{ 0,0,-1,0,2,0,0,-1,-1,3,0,-1,5,0,-1,2,0,3,2,0,-1,5,-1,5,5,0,5,-1,-1,5,0,5,3,-1,-1,5,5,5,5,5,5,5,},
				{ 0,0,-1,0,2,0,0,-1,-1,4,0,4,-1,0,-1,2,0,4,2,0,4,-1,4,-1,4,0,-1,4,-1,4,0,4,4,4,4,-1,4,4,4,4,4,4,},
				{ 0,0,-1,0,2,0,0,-1,-1,4,0,4,5,0,-1,2,0,4,2,0,4,5,4,5,4,0,5,4,-1,4,0,4,4,4,4,5,4,4,4,4,4,4,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,-1,0,3,3,0,3,3,0,-1,-1,3,3,-1,0,3,3,3,-1,0,3,3,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,3,0,0,-1,3,3,0,-1,5,0,3,3,0,3,3,0,-1,5,3,3,5,0,3,3,3,5,0,3,3,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,3,0,0,-1,3,4,0,4,-1,0,3,3,0,4,3,0,4,-1,3,3,4,0,3,3,3,4,0,3,4,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,3,0,0,-1,3,4,0,4,5,0,3,3,0,4,3,0,4,5,3,3,4,0,3,3,3,4,0,3,4,3,3,3,3,3,3,3,3,3,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,-1,0,2,2,0,2,2,0,2,2,-1,-1,-1,0,2,2,2,2,0,-1,2,2,2,2,-1,2,2,2,2,2,},
				{ 0,0,-1,0,2,0,0,2,-1,3,0,-1,5,0,2,2,0,2,2,0,2,2,-1,5,5,0,2,2,2,2,0,5,2,2,2,2,5,2,2,2,2,2,},
				{ 0,0,-1,0,2,0,0,2,-1,4,0,4,-1,0,2,2,0,2,2,0,2,2,4,-1,4,0,2,2,2,2,0,4,2,2,2,2,4,2,2,2,2,2,},
				{ 0,0,-1,0,2,0,0,2,-1,4,0,4,5,0,2,2,0,2,2,0,2,2,4,5,4,0,2,2,2,2,0,4,2,2,2,2,4,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,-1,0,2,3,0,2,3,0,2,2,3,3,-1,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,3,0,-1,5,0,2,3,0,2,3,0,2,2,3,3,5,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,4,0,4,-1,0,2,3,0,2,3,0,2,2,3,3,4,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 0,0,-1,0,3,0,0,2,3,4,0,4,5,0,2,3,0,2,3,0,2,2,3,3,4,0,2,2,2,2,0,3,2,2,2,2,3,2,2,2,2,2,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
				{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			},
		};


	}
}

